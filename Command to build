docker run --name some-memcache -d memcached:1.4.25 memcached -p 11211 -m 64

docker build -t nginx-test-image NGINX
docker run --name some-nginx -d -p 8080:80 nginx-test-image

docker build -t phpfpm-test-image PHP-FPM
docker run --name some-phpfpm -p 9000:9000 phpfpm-test-image
OR
docker-machine ssh default //docker-machine ls  <- You need to ssh because opening '/bin/bash' from windows doesn't work
cd "/c/Users/bhawnaamin/DLEMP/"
docker run -i -t --name some-phpfpm  -p 9000:9000 phpfpm-test-image /bin/bash
php-fpm -D


//TO DO
- Configure php session to use memcached.
- Stop dlemp_cmd and dlemp_htdocs containers correctly
- Now this folder must be called 'DLEMP' otherwise common image will be generated with different name. Figure out a way to assign static permanent name to common image.
- Add readme instruction on how to use this repository
	-Copy all 'docker-*' files into Laravel folder(1 folder and 4 files)
	-Write all docker commands to start all needed containers
	-Commands to git to cmd on the container
-Make sure permission 'WEBAPP' folder is correct on 'nginx' image.
-MySQL port is exposed during production. It should only be exposed during development.
-For generic machine only '127.0.0.1:8080' works 'locahost:8080' doesn't work.
-Figure out a way to remove 'This Connection is Untrusted' warning when visiting 'https://webapp.dev/page1.htm' from FireFox without adding exception.

//start test server
	http://192.168.99.100/page1.htm
	http://192.168.99.100/page2.php


//Using "docker-compose"
  docker-compose build
  docker-compose up
  Ctrl + C
  docker-compose rm
OR
  docker-compose build
  docker-compose up -d(This command will automatically read 'docker-compose.yml' and 'docker-compose.override.yml')
    OR
  docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
  docker-compose ps
  docker-compose stop
  docker-compose ps
  docker-compose start
  docker-compose ps
  docker-compose stop
  docker-compose ps
  docker-compose rm


//start temporary 'dlemp_cli' instance
docker-machine ssh <machine-name> //docker-machine ssh default
docker exec -it dlemp_cmd_1 /bin/bash OR docker run -it --rm -v /c/Users/<username>/DLEMP/WEBAPP:/usr/share/nginx/WEBAPP dlemp_cmd /bin/bash(Example: docker run -it --rm -v /c/Users/bhawnaamin/DLEMP/WEBAPP:/usr/share/nginx/WEBAPP dlemp_cmd /bin/bash)
	//start new laravel install
	cd /usr/share/nginx/WEBAPP && ~/.composer/vendor/bin/laravel new temp-laravel && mv temp-laravel/{.,}* .
	ls temp-laravel -al //make sure this folder is empty
	rm -r temp-laravel //remove empty folder
	//end new laravel install
	//start run laravel phpunit
	vendor/bin/phpunit --version
	rm -r phpunit-coverage && mkdir phpunit-coverage && vendor/bin/phpunit --coverage-html phpunit-coverage
	//end run laravel phpunit
	//start change initial Laravel configurations
	use memcached for caching: 'config/cache.php' => change default driver from 'file' to 'memcached' and change memcached host from '127.0.0.1' to 'memcached'.
	use memcahed for sessions: 'config/session.php' => change default driver from 'file' to 'memcached', set 'expire_on_close' to 'true' and set 'encrypt' to 'true'.
	change database settings: 'config/.env' and 'config/.env.example' => change DB_HOST from 'localhost' to 'mysql'.
	//end change initial Laravel configurations
//end temporary 'dlemp_cli' instance


//start create generic docker-machine
cd ~/.ssh && ssh-keygen -t rsa -C "Docker test machine key" //enter filename to 'docker_test' and don't set a passphrase

mkdir docker-test && cd docker-test && vagrant init ubuntu/trusty64 && vagrant up

ssh vagrant@127.0.0.1 -p 2222 //password is 'vagrant'
sudo adduser dockeruser //set password to 'dockerpasswd'
sudo gpasswd --add dockeruser sudo
sudo nano /etc/sudoers.d/AllowOthersToSudoWithPassword
		User_Alias     EVERYONE = dockeruser
		EVERYONE       ALL = (ALL) NOPASSWD: ALL

su --login dockeruser
mkdir ~/.ssh
chmod 700 ~/.ssh
nano ~/.ssh/authorized_keys // Copy your public key from '~/.ssh/docker_test.pub' file on your machine here. CTRL-X, then Y, then ENTER
chmod 600 ~/.ssh/authorized_keys
sudo service ssh restart
ssh dockeruser@127.0.0.1 -p 2222 //Test this from new terminal then 'exit' if this success

sudo nano /etc/ssh/sshd_config //Change 'PermitRootLogin yes' to 'PermitRootLogin no'
sudo service ssh restart //Then exit to local machine

ssh -L 8080:127.0.0.1:80 -L 2376:127.0.0.1:2376 dockeruser@127.0.0.1 -p 2222 //on a different terminal so Docker client can connect to the machine. Keep this terminal open.

docker-machine create -d generic --generic-ip-address 127.0.0.1 --generic-ssh-key ~/.ssh/docker_test --generic-ssh-user dockeruser --generic-ssh-port 2222 generic-machine-01
eval $(docker-machine env generic-machine-01)
docker-machine ssh generic-machine-01
sudo passwd dockeruser -d //Login are allowed only allowed using SSH key. Password is disabled for the account. You may reset password for the account using command 'passwd dockeruser'

docker-machine rm generic-machine-01
*Note: Make sure port '2376' on generic host is open for the docker-client to connect.
http://127.0.0.1:8080/page1.htm <- This doesn't work since volume can not be mounted to generic machine. But nginx will still display page not found error.
//end create generic docker-machine

//start increase Docker machine RAM
docker-machine stop default
  Open VirtualBox GUI
  Go to "Preferences > Memory" and increase it <= Need to be checked
OR
  docker-machine rm default
  docker-machine create -d virtualbox --virtualbox-memory 2048 default
docker-machine start default
//start increase Docker machine RAM

//start adding php.ini
Go to: https://github.com/php/php-src/blob/php-5.6.16/php.ini-production
Select correct tag for the version of php that you are using
Click on 'Raw'
Save file in 'docker/docker-config' folder as 'php.ini'
Make changes to this 'php.ini' according to your needs
COPY the file to 'phpfpm' and 'cmd' image in directory '/usr/local/etc/php/' : Example 'COPY '
//start adding php.ini

//start setting project name manually
export COMPOSE_PROJECT_NAME=<project-name> (Example: export COMPOSE_PROJECT_NAME=PrjectName && echo $COMPOSE_PROJECT_NAME)
unset COMPOSE_PROJECT_NAME
//end setting project name manually

//start creating self-signed (wildcard) SSL certificate(Secure domain and all it subdomains)
openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout docker/docker-config/docker-ssl/docker-webapp.key -out docker/docker-config/docker-ssl/docker-webapp.crt
 	-Enter '*.webapp.dev' for 'Common Name (e.g. server FQDN or YOUR name)'. All other inputs were left empty(Simply hit enter).
Optional: Add '192.168.99.100       webapp.dev' to 'C:\Windows\System32\drivers\etc\hosts'.
//end creating self-signed (wildcard) SSL certificate(Secure domain and all it subdomains)

//Other notes:
-Production volumes:  './dockervolumes<actual-path-to-volume-folder-with-slash-replaced-with-zero>'(Example: You will mount 'storage/app' to './dockervolumesstorage0app'.[Unfortunately this schema was chosen because '-' is not allowed in the volume path])
	-This allow easily excluding all volume from being copied when building image for production(When building Docker image directly on production server from source code).
