//start commands to push images to docker hub. Tags are created at increments of 10s. '.1', '.11', ...
    //start login to docker hub
docker login
    //end login to docker hub

    //start push phpfpmdev image
docker tag dlemp/phpfpm rasodu/phpfpmdev:5.6.<version_number>
docker push rasodu/phpfpmdev:5.6.<version_number>
    //end push phpfpmdev image
    //start push cmd image
docker tag dlemp_cmd rasodu/cmd:5.6.<version_number>
docker push rasodu/cmd:5.6.<version_number>
    //end push cmd image
    //start push nginxhttp image
docker tag dlemp_nginxhttp rasodu/nginxhttp:1.9.<version_number>
docker push rasodu/nginxhttp:1.9.<version_number>
    //end push nginxhttp image
    //start push nodesocket image
docker tag dlemp_nodesocket rasodu/nodesocket:4.4.<version_number>
docker push rasodu/nodesocket:4.4.<version_number>
    //end push s3mock image

    //start push phpfpm
docker history dlemp/phpfpm
docker tag <image-id-of-layer> rasodu/phpfpm:5.6.<version_number>//Tag at layer before installing xdebug
docker push rasodu/phpfpm:5.6.<version_number>
    //end push phpfpm
    //start push nginxhttps
docker history dlemp_nginxhttps
docker tag <image-id-of-layer> rasodu/nginxhttps:1.9.<version_number>//Tag at layer before copying 'public' directory to the image
docker push rasodu/nginxhttps:1.9.<version_number>
    //end push nginxhttps

    //start push s3mock image
docker exec -it dlemp_webapp.dev_1 /bin/bash
s3cmd mb s3://default_bucket //Check 'default_bucket' bucket is created by visiting: http://webapp.dev:4569
docker-compose stop
docker commit dlemp_webapp.dev_1 rasodu/s3mock:0.2.<version_number>
docker push rasodu/s3mock:0.2.<version_number>
    //end push s3mock image

    //start logout from docker hub
docker logout
    //end logout from docker hub
//end commands to push images to docker hub. Tags are created at increments of 10s. '.1', '.11', ...


//main docker commands
docker run --name some-memcache -d memcached:1.4.25 memcached -p 11211 -m 64

docker build -t nginx-test-image NGINX
docker run --name some-nginx -d -p 8080:80 nginx-test-image

docker build -t phpfpm-test-image PHP-FPM
docker run --name some-phpfpm -p 9000:9000 phpfpm-test-image
OR
docker-machine ssh default //docker-machine ls  <- You need to ssh because opening '/bin/bash' from windows doesn't work
cd "/c/Users/bhawnaamin/DLEMP/"
docker run -i -t --name some-phpfpm  -p 9000:9000 phpfpm-test-image /bin/bash
php-fpm -D


//TO DO
- Unittest is not yet written for reading event back from socket.io server.('tests\A42SocketTest.php')
- Node.js Socket.io doesn't work on Firefox with self signed certificate. It does work fine on Chrome and Internet Explorer.
- Allow to define memory limit in redis server(Check if it can be set using config file)
- Letâ€™s Encrypt improvements
    -Think of mounting let's encrypt's certificate directory using docker volume
        -More then 1 nginx server can be started
        -Check if there is a way to setup certificate directory using volume so you don't have to reacquire certificate when you recreate nginx service.
    -Write steps to renew and revoke certificate using let's encrypt
- Try to setup default network on 'overlay' driver during production. So the containers can be deployed on multiple hosts. 'bridge' network only support a single host.
- Configure php session to use memcached.
- Stop dlemp_cmd and dlemp_htdocs containers correctly
- Now this folder must be called 'DLEMP' otherwise common image will be generated with different name. Figure out a way to assign static permanent name to common image.
- Add readme instruction on how to use this repository
	-Copy all 'docker-*' files into Laravel folder(1 folder and 4 files)
	-Write all docker commands to start all needed containers
	-Commands to git to cmd on the container
-Make sure permission 'WEBAPP' folder is correct on 'nginx' image.
-MySQL port is exposed during production. It should only be exposed during development.
-For generic machine only '127.0.0.1:8080' works 'locahost:8080' doesn't work.
-Figure out a way to remove 'This Connection is Untrusted' warning when visiting 'https://webapp.dev/page1.htm' from FireFox without adding exception.
-Currently data volumes that are created for production don't prepend project name to itself. Therefore it is a real possibility that two different projects running on a single host in production accidently share their volumes. It is recommended that you change production data volume name in 'docker-compose.prod.yml' file when you copy the files to create new project.
-Laravel cron has mainly has two following problem
	-We assume docker binary is located at '/usr/local/bin/docker' to mount it inside crop container in 'docker-compose.prod.yml'. But for your OS it may be located at different place. You must change this value in order for Laravel schedule command to be called correctly. This problem is not fixed because $(which docker) to define source volume path doesn't work in 'docker-compose.prod.yml'
	-You should run only a single cron container on single docker daemon during production(Even if you have multiple projects deployed on a single docker daemon). Single cron container calls Laravel schedule command on all '*_phpfpm_1' containers reachable by docker daemon. If you have multiple cron containers deployed on a single docker daemon, then all Laravel command on '*_phpfpm_1' containers will be called multiple times in a minute.

//start test server
	http://192.168.99.100/page1.htm
	http://192.168.99.100/page2.php


//Using "docker-compose"
  docker-compose build
  docker-compose up
  Ctrl + C
  docker-compose rm -v
OR
  docker-compose build
  docker-compose up -d(This command will automatically read 'docker-compose.yml' and 'docker-compose.override.yml')
    OR
  docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
  docker-compose ps
  docker-compose stop
  docker-compose ps
  docker-compose start
  docker-compose ps
  docker-compose stop
  docker-compose ps
  docker-compose rm -v
    OR
  docker-compose rm

//rebuild single image and redeploy single service
docker-compose stop phpfpm
docker-compose build phpfpm
docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --no-deps phpfpm

//volumes
docker volume ls //list all volumes
docker volume rm <volume-name> //remove a volume
docker volume rm $(docker volume ls -q) //remove all volumes
docker-compose rm //remove containers
docker-compose rm -v //removes containers and 'Data volumes' and 'Mounted directory data volumes'

//networks
docker network ls //list all volumes
docker network rm <network-name> //remove a volume

//start temporary 'dlemp_cli' instance
docker-machine ssh <machine-name> //docker-machine ssh default
docker exec -it dlemp_cmd_1 /bin/bash OR docker run -it --rm -v /c/Users/<username>/DLEMP/WEBAPP:/usr/share/nginx/WEBAPP dlemp_cmd /bin/bash(Example: docker run -it --rm -v /c/Users/bhawnaamin/DLEMP/WEBAPP:/usr/share/nginx/WEBAPP dlemp_cmd /bin/bash)
	//start new laravel install
	cd /usr/share/nginx/WEBAPP && ~/.composer/vendor/bin/laravel new temp-laravel && mv temp-laravel/{.,}* .
	ls temp-laravel -al //make sure this folder is empty
	rm -r temp-laravel //remove empty folder
	//end new laravel install
	//start run laravel phpunit
	vendor/bin/phpunit --version
	rm -r public/phpunit-coverage && mkdir public/phpunit-coverage && vendor/bin/phpunit --coverage-html public/phpunit-coverage
	//end run laravel phpunit
	//start change initial Laravel configurations
	use memcached for caching: 'config/cache.php' => change default driver from 'file' to 'memcached' and change memcached host from '127.0.0.1' to 'memcached'.
	use memcahed for sessions: 'config/session.php' => change default driver from 'file' to 'memcached', set 'expire_on_close' to 'true' and set 'encrypt' to 'true'.
	change database settings: 'config/.env' and 'config/.env.example' => change DB_HOST from 'localhost' to 'mysql'.
	//end change initial Laravel configurations
//end temporary 'dlemp_cli' instance


//start create generic docker-machine
cd ~/.ssh && ssh-keygen -t rsa -C "Docker test machine key" //enter filename to 'docker_test' and don't set a passphrase

mkdir docker-test && cd docker-test && vagrant init ubuntu/trusty64 && vagrant up

ssh vagrant@127.0.0.1 -p 2222 //password is 'vagrant'
sudo adduser dockeruser //set password to 'dockerpasswd'
sudo gpasswd --add dockeruser sudo
sudo nano /etc/sudoers.d/AllowOthersToSudoWithPassword
		User_Alias     EVERYONE = dockeruser
		EVERYONE       ALL = (ALL) NOPASSWD: ALL

su --login dockeruser
mkdir ~/.ssh
chmod 700 ~/.ssh
nano ~/.ssh/authorized_keys // Copy your public key from '~/.ssh/docker_test.pub' file on your machine here. CTRL-X, then Y, then ENTER. User Git cli to copy the file. Using Docker toolbox cli the keys splits key into multiple lines and doesn't allow user to login without password.
chmod 600 ~/.ssh/authorized_keys
sudo service ssh restart
ssh -i ~/.ssh/docker_test dockeruser@127.0.0.1 -p 2222 //Test this from new terminal then 'exit' if this success

sudo nano /etc/ssh/sshd_config //Change 'PermitRootLogin yes' to 'PermitRootLogin no'
sudo service ssh restart //Then exit to local machine

ssh -L 8080:127.0.0.1:80 -L 2376:127.0.0.1:2376 dockeruser@127.0.0.1 -p 2222 //on a different terminal so Docker client can connect to the machine. Keep this terminal open.

docker-machine create -d generic --generic-ip-address 127.0.0.1 --generic-ssh-key ~/.ssh/docker_test --generic-ssh-user dockeruser --generic-ssh-port 2222 generic-machine-01
eval $(docker-machine env generic-machine-01)
docker-machine ssh generic-machine-01
sudo passwd dockeruser -d //Login are allowed only allowed using SSH key. Password is disabled for the account. You may reset password for the account using command 'passwd dockeruser'

docker-machine rm generic-machine-01
*Note: Make sure port '2376' on generic host is open for the docker-client to connect.
http://127.0.0.1:8080/page1.htm <- This doesn't work since volume can not be mounted to generic machine. But nginx will still display page not found error.
//end create generic docker-machine

//start increase Docker machine RAM
docker-machine stop default
  Open VirtualBox GUI
  Go to "Preferences > Memory" and increase it <= Need to be checked
OR
  docker-machine rm default
  docker-machine create -d virtualbox --virtualbox-memory 2048 default
docker-machine start default
//start increase Docker machine RAM

//start upgrade docker engine on docker host
docker-machine upgrade <machine-name> //currently this doesn't work on generic machine <= https://github.com/docker/machine/issues/3009
    OR
Digital ocean -> Select droplet -> Destroy  -> Rebuild from original
 //recreate this machine
    OR <= Not tested yet
docker-machine ssh <machine name>
apt-get purge docker-engine
sudo shutdown -r now
docker-machine rm <machine name>
 //recreate this machine
//end upgrade docker engine on docker host

//start adding php.ini
Go to: https://github.com/php/php-src/blob/php-5.6.16/php.ini-production
Select correct tag for the version of php that you are using
Click on 'Raw'
Save file in 'docker/docker-config' folder as 'php.ini'
Make changes to this 'php.ini' according to your needs
COPY the file to 'phpfpm' and 'cmd' image in directory '/usr/local/etc/php/' : Example 'COPY '
//start adding php.ini

//start setting project name manually
export COMPOSE_PROJECT_NAME=<project-name> (Example: export COMPOSE_PROJECT_NAME=PrjectName && echo $COMPOSE_PROJECT_NAME)
unset COMPOSE_PROJECT_NAME
//end setting project name manually

//start creating self-signed (wildcard) SSL certificate(Secure domain and all it subdomains)
openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout docker/docker-config/docker-ssl/docker-webapp.key -out docker/docker-config/docker-ssl/docker-webapp.crt
 	-Enter '*.webapp.dev' for 'Common Name (e.g. server FQDN or YOUR name)'. All other inputs were left empty(Simply hit enter).
Optional: Add '192.168.99.100       webapp.dev' to 'C:\Windows\System32\drivers\etc\hosts'.
//end creating self-signed (wildcard) SSL certificate(Secure domain and all it subdomains)

//start steps to upgrade php version
Change tag in 'FROM' instruction in dockerfile to build phpfpm and cmd image
Download php.ini production file for the version of php you upgraded to from github php-src repository
//start steps to upgrade php version

//start steps to acquire certificate using Letâ€™s Encrypt(http://webapp.dev/.well-known/acme-challenge/ <= ACME challenge and response directory[last '/' is required because the way we performed setup nginx])
Getting Initial certificate
1)FILL the information in config file => docker/docker-config/letsencrypt-cli.ini (Replace: <email> and <domain> with actual values.)
2)docker-machine ssh <docker-machine-name>
3)docker exec -it <nginxhttp-container-name> /bin/bash
4)/DLEMP/letsencrypt/bin/letsencrypt-auto --version
5)/DLEMP/letsencrypt/bin/letsencrypt-auto certonly --agree-tos     <== This will automatically use config stored at '/root/.config/letsencrypt/cli.ini'
6)ln -sf /etc/letsencrypt/live/<domain>/privkey.pem /etc/letsencrypt/privkey.pem
  ln -sf /etc/letsencrypt/live/<domain>/fullchain.pem /etc/letsencrypt/fullchain.pem
7)exit
8)exit
9)docker-compose -f docker-compose.yml -f docker-compose.prod.yml restart nginxhttps    <= restart container name
10)docker-compose -f docker-compose.yml -f docker-compose.prod.yml restart nodesocket    <= restart container socket
Renew certificate
1)Need to figure this out
Revoke certificate
/DLEMP/letsencrypt/bin/letsencrypt-auto revoke --cert-path /etc/letsencrypt/live/<domain>/cert.pem
//end steps to acquire certificate using Letâ€™s Encrypt


//Other notes:
-Production volumes:  './dockervolumes<actual-path-to-volume-folder-with-slash-replaced-with-zero>'(Example: You will mount 'storage/app' to './dockervolumesstorage0app'.[Unfortunately this schema was chosen because '-' is not allowed in the volume path])
	-This allow easily excluding all volume from being copied when building image for production(When building Docker image directly on production server from source code).

//Cron:
-Cron container is only stated during production. You can run your Laravel scheduled jobs manually during development using 'php /path/to/artisan schedule:run' command in phpfpm container.
-Output from Laravel schedule are logged. The log file is rotated every week and 4 rotated log files are kept at the time(So at least data from past 4 week is available at any given time. If original log file was empty, then an empty rotated file will still be created.)


//Redis require via composer
composer require predis/predis:~1.0
//Beanstalkd: require via composer
composer require pda/pheanstalk:~3.0

Why should you use 'Beanstalkd' instead of 'Redis' for queues?
-Beanstalkd implements job queue
-Redis implements message queue
*Note: Message queue broadcasts message to multiple receivers. Job queue will only send job to the first requesting worker.

//Show output from smtp log. Continue streaming the new output from the containerâ€™s STDOUT and STDERR.
docker logs --follow dlemp_smtp_1
